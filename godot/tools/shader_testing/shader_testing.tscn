[gd_scene load_steps=12 format=2]

[ext_resource path="res://export_pal.png" type="Texture" id=1]
[ext_resource path="res://tools/shader_testing/shader_testing.gd" type="Script" id=3]

[sub_resource type="QuadMesh" id=1]

[sub_resource type="VisualShaderNodeVectorDecompose" id=8]

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "TextureUniform"
texture_type = 1

[sub_resource type="VisualShaderNodeColorUniform" id=7]
output_port_for_preview = 0
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeIf" id=9]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 0.0001, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 ColorUniform : hint_color;
uniform sampler2D TextureUniform : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = ColorUniform.rgb;
	float n_out5p1 = ColorUniform.a;

// VectorDecompose:9
	float n_out9p0 = n_out5p0.x;
	float n_out9p1 = n_out5p0.y;
	float n_out9p2 = n_out5p0.z;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(TextureUniform, n_out2p0.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// VectorDecompose:10
	float n_out10p0 = n_out3p0.x;
	float n_out10p1 = n_out3p0.y;
	float n_out10p2 = n_out3p0.z;

// If:8
	float n_in8p2 = 0.00010;
	vec3 n_in8p4 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in8p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out8p0;
	if(abs(n_out9p0 - n_out10p0) < n_in8p2)
	{
		n_out8p0 = n_out3p0;
	}
	else if(n_out9p0 < n_out10p0)
	{
		n_out8p0 = n_in8p5;
	}
	else
	{
		n_out8p0 = n_in8p4;
	}

// Output:0
	ALBEDO = n_out8p0;
	ALPHA = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -349, 278 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -560, 100 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -380, 20 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( -500, 300 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( 40, 220 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -300, 320 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( -140, 40 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 1, 0, 1, 5, 0, 9, 0, 9, 0, 8, 0, 3, 0, 10, 0, 10, 0, 8, 1, 8, 0, 0, 0, 3, 0, 8, 3 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/ColorUniform = Color( 0.0784314, 0.156863, 0.439216, 1 )
shader_param/TextureUniform = ExtResource( 1 )

[node name="shader_testing" type="Spatial"]
script = ExtResource( 3 )

[node name="plane" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 5 )

[node name="floor" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, -0.5, 0.5 )
mesh = SubResource( 1 )
material/0 = SubResource( 5 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.29767 )
